{"ast":null,"code":"\n// import React, { useState, useEffect } from 'react';\n// import Select from 'react-select';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addRecipe, getDiets } from '../../redux/actions';\n\n// const Form = () => {\n//   const dispatch = useDispatch();\n//   const dietOptions = useSelector((state) => state.dietOptions); // Obtener las opciones de dietas desde el estado\n\n//   const [form, setForm] = useState({\n//     name: '',\n//     summary: '',\n//     healthScore: '',\n//     stepByStep: '',\n//     image: '',\n//     diets: [],\n//   });\n\n//   useEffect(() => {\n//     // Obtener las opciones de dietas desde el servidor al cargar el componente\n//     dispatch(getDiets());\n//   }, [dispatch]);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setForm({ ...form, [name]: value });\n//   };\n\n//   const handleSelectChange = (selectedOptions) => {\n//     const selectedDiets = selectedOptions.map((option) => option.value);\n//     setForm({ ...form, diets: selectedDiets });\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     // Validación del nombre\n//     if (!/^[A-Za-z\\s]+$/.test(form.name)) {\n//       alert('El nombre solo debe contener letras y espacios, sin números ni símbolos');\n//       return;\n//     }\n\n//     // Validación del summary\n//     if (form.summary.trim().split(' ').length < 2) {\n//       alert('El resumen debe tener al menos dos palabras');\n//       return;\n//     }\n\n//     // Validación del healthScore\n//     const healthScore = parseInt(form.healthScore);\n//     if (isNaN(healthScore) || healthScore < 1 || healthScore > 100) {\n//       alert('El healthScore debe ser un número entre 1 y 100');\n//       return;\n//     }\n\n//     // Validación de steps\n//     if (form.stepByStep.trim().split(' ').length < 2) {\n//       alert('Los pasos deben tener al menos dos palabras');\n//       return;\n//     }\n\n//     try {\n//       dispatch(addRecipe(form));\n\n//       // Limpiar los campos del formulario\n//       setForm({\n//         name: '',\n//         summary: '',\n//         healthScore: '',\n//         stepByStep: '',\n//         image: '',\n//         diets: [],\n//       });\n\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label>\n//         Name:\n//         <input type=\"text\" value={form.name} onChange={handleChange} name=\"name\" />\n//       </label>\n//       <br />\n//       <label>\n//         Summary:\n//         <input type=\"text\" value={form.summary} onChange={handleChange} name=\"summary\" />\n//       </label>\n//       <br />\n//       <label>\n//         Image:\n//         <input type=\"text\" value={form.image} onChange={handleChange} name=\"image\" />\n//       </label>\n//       <br />\n//       <label>\n//         Health Score:\n//         <input type=\"number\" value={form.healthScore} onChange={handleChange} name=\"healthScore\" />\n//       </label>\n//       <br />\n//       <label>\n//         Diets:\n//         <Select\n//           isMulti\n//           options={dietOptions.map((diet) => ({ value: diet.name, label: diet.name }))}\n\n//           onChange={handleSelectChange}\n//         />\n//       </label>\n//       <br />\n//       <label>\n//         Steps:\n//         <textarea value={form.stepByStep} onChange={handleChange} name=\"stepByStep\"></textarea>\n//       </label>\n//       <br />\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// };\n\n// export default Form;","map":{"version":3,"names":[],"sources":["C:/Users/Agus/Documents/Henry/Proyecto Individual/PI REAL/PI-Food-main/PI-Food-main/client/src/Components/Form/Form.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import Select from 'react-select';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { addRecipe, getDiets } from '../../redux/actions';\r\n\r\n// const Form = () => {\r\n//   const dispatch = useDispatch();\r\n//   const dietOptions = useSelector((state) => state.dietOptions); // Obtener las opciones de dietas desde el estado\r\n\r\n//   const [form, setForm] = useState({\r\n//     name: '',\r\n//     summary: '',\r\n//     healthScore: '',\r\n//     stepByStep: '',\r\n//     image: '',\r\n//     diets: [],\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     // Obtener las opciones de dietas desde el servidor al cargar el componente\r\n//     dispatch(getDiets());\r\n//   }, [dispatch]);\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setForm({ ...form, [name]: value });\r\n//   };\r\n\r\n//   const handleSelectChange = (selectedOptions) => {\r\n//     const selectedDiets = selectedOptions.map((option) => option.value);\r\n//     setForm({ ...form, diets: selectedDiets });\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Validación del nombre\r\n//     if (!/^[A-Za-z\\s]+$/.test(form.name)) {\r\n//       alert('El nombre solo debe contener letras y espacios, sin números ni símbolos');\r\n//       return;\r\n//     }\r\n\r\n//     // Validación del summary\r\n//     if (form.summary.trim().split(' ').length < 2) {\r\n//       alert('El resumen debe tener al menos dos palabras');\r\n//       return;\r\n//     }\r\n\r\n//     // Validación del healthScore\r\n//     const healthScore = parseInt(form.healthScore);\r\n//     if (isNaN(healthScore) || healthScore < 1 || healthScore > 100) {\r\n//       alert('El healthScore debe ser un número entre 1 y 100');\r\n//       return;\r\n//     }\r\n\r\n//     // Validación de steps\r\n//     if (form.stepByStep.trim().split(' ').length < 2) {\r\n//       alert('Los pasos deben tener al menos dos palabras');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       dispatch(addRecipe(form));\r\n\r\n//       // Limpiar los campos del formulario\r\n//       setForm({\r\n//         name: '',\r\n//         summary: '',\r\n//         healthScore: '',\r\n//         stepByStep: '',\r\n//         image: '',\r\n//         diets: [],\r\n//       });\r\n      \r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     }\r\n//   }\r\n//   return (\r\n//     <form onSubmit={handleSubmit}>\r\n//       <label>\r\n//         Name:\r\n//         <input type=\"text\" value={form.name} onChange={handleChange} name=\"name\" />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Summary:\r\n//         <input type=\"text\" value={form.summary} onChange={handleChange} name=\"summary\" />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Image:\r\n//         <input type=\"text\" value={form.image} onChange={handleChange} name=\"image\" />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Health Score:\r\n//         <input type=\"number\" value={form.healthScore} onChange={handleChange} name=\"healthScore\" />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Diets:\r\n//         <Select\r\n//           isMulti\r\n//           options={dietOptions.map((diet) => ({ value: diet.name, label: diet.name }))}\r\n          \r\n//           onChange={handleSelectChange}\r\n//         />\r\n//       </label>\r\n//       <br />\r\n//       <label>\r\n//         Steps:\r\n//         <textarea value={form.stepByStep} onChange={handleChange} name=\"stepByStep\"></textarea>\r\n//       </label>\r\n//       <br />\r\n//       <button type=\"submit\">Submit</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default Form;\r\n\r\n\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}